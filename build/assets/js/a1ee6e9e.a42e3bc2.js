"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[160],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Python",slug:"python",excerpt:"Tutorial for integrating the Python SDK",hidden:!1,createdAt:"2023-05-10T18:37:50.441Z",updatedAt:"2023-05-10T23:23:56.128Z"},l=void 0,i={unversionedId:"quick-start/analytics/python",id:"quick-start/analytics/python",title:"Python",description:"Check out our example app on GitHub to get started!",source:"@site/docs/quick-start/analytics/python.md",sourceDirName:"quick-start/analytics",slug:"/quick-start/analytics/python",permalink:"/docs/quick-start/analytics/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quick-start/analytics/python.md",tags:[],version:"current",frontMatter:{title:"Python",slug:"python",excerpt:"Tutorial for integrating the Python SDK",hidden:!1,createdAt:"2023-05-10T18:37:50.441Z",updatedAt:"2023-05-10T23:23:56.128Z"},sidebar:"tutorialSidebar",previous:{title:"Quick Start - Analytics",permalink:"/docs/quick-start/analytics/quick-start-wale-analytics"},next:{title:"Quick Start - Playground",permalink:"/docs/quick-start/playground-quick-tutorial"}},p={},s=[{value:"Step 1: Install the Wale SDK Python package",id:"step-1-install-the-wale-sdk-python-package",level:3},{value:"Step 2: Set up the Wale logger",id:"step-2-set-up-the-wale-logger",level:3},{value:"Step 3: Call the logger",id:"step-3-call-the-logger",level:3},{value:"Step 5: View your logs in the Wale dashboard",id:"step-5-view-your-logs-in-the-wale-dashboard",level:3}],u={toc:s},c="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Check out our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/trywale/analytics-sdk/tree/master/examples/summarizer-backend"},"example app")," on GitHub to get started!"),(0,r.kt)("h3",{id:"step-1-install-the-wale-sdk-python-package"},"Step 1: Install the Wale SDK Python package"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pip install wale-sdk")),(0,r.kt)("h3",{id:"step-2-set-up-the-wale-logger"},"Step 2: Set up the Wale logger"),(0,r.kt)("p",null,"Set up the Wale logger by initializing the Wale class with your Wale API Key. Get your Wale API key by visiting the ",(0,r.kt)("a",{parentName:"p",href:"https://ide.trywale.com/settings"},"settings page")),(0,r.kt)("p",null,"Create a new script ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import openai\nfrom wale import Wale\n\n# Set your Wale API key\nWALE_API_KEY = "<WALE_API_KEY>"\nOPENAI_API_KEY = "<OPENAI_API_KEY>"\n# Initialize the Wale logger\nlogger = Wale(api_key=WALE_API_KEY)\n\n# Initialize OpenAI Key\nopenai.api_key = OPENAI_API_KEY\n')),(0,r.kt)("h3",{id:"step-3-call-the-logger"},"Step 3: Call the logger"),(0,r.kt)("p",null,"Once you have set up the Wale logger and generated the summary using OpenAI, you can use the Wale logger to log the input document and generated summary along with additional metadata. This can be done by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"logger.log()")," and passing in the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"output"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"task_id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"model_config"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"person_id"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"total_tokens")," as arguments. This will log the data to the Wale platform, allowing you to easily analyze and understand LLM calls."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Set the OpenAI engine and input document\nmodel = "text-davinci-003"\ndocument = "This is an example document that we want to summarize."\ntemperature = 0.5\nmax_tokens = 100\n\n# Generate a summary using OpenAI\nresponse = openai.Completion.create(\n  model=model,\n  prompt=f"Please summarize the following document for a 10 year old. Input: \\n\\n{document}. \\n\\nSummary:",\n  temperature=temperature,\n  max_tokens=max_tokens,\n  n=1,\n  stop=None\n)\n\n# Extract the summary and total tokens used\nsummary = response.choices[0].text.strip()\ntotal_tokens = response.usage["total_tokens"]\n\n# Log the input document and generated summary using the Wale logger\nlog_obj = logger.log(\n  inputs={"document": document},\n  output=summary,\n  task_id="summarize",\n  model_config={\n    "model": model,\n    "provider": "openai",\n    "temperature": temperature,\n    "max_tokens": max_tokens,\n  },\n  person_id="pid-person123",\n  total_tokens=total_tokens,\n)\nprint(log_obj[\'id\'])\n')),(0,r.kt)("h3",{id:"step-5-view-your-logs-in-the-wale-dashboard"},"Step 5: View your logs in the Wale dashboard"),(0,r.kt)("p",null,"Once you have started logging data with the Wale SDK, you can view your logs in the Wale Events page:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(5680).Z,width:"1916",height:"1144"})),(0,r.kt)("p",null,"The dashboard provides a detailed view of your logged data, allowing you to analyze and understand your LLM (language model) calls. "),(0,r.kt)("p",null,"You can log in to the Wale dashboard using your Wale account credentials. Once you're logged in, you can view your logs, filter them, and export them for further analysis."))}d.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/python-events-8e4248c72c0077e3886774f31f90556f.png"}}]);